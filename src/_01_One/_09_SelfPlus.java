package _01_One;

/**
 * Created with IntelliJ IDEA.
 * User: i33
 * Date: 13-6-21
 * Time: 下午4:58
 */
public class _09_SelfPlus {

      public static void main(String[] args){
          short x = 0;
          int i = 123456;
          // x+=i复合赋值编译将不会产生任何错误：
          // 包含了一个隐藏的转型！
          // x = x + i 则编辑错误
          System.out.println(x += i);

          /*
          你可能期望x的值在这条语句执行之后是123,456，但是并非如此l，它的值是-7,616。
          int类型的数值123456对于short来说太大了。自动产生的转型悄悄地把int数值的高
          两位给截掉了。
          */

          /*
          许多程序员都会认为该迷题中的第一个表达式（x += i）只是第二个表达式（x = x + i）
          的简写方式。但是这并不十分准确。这两个表达式都被称为赋值表达式。第二条语句使用的
          是简单赋值操作符（=），而第一条语句使用的是复合赋值操作符。（复合赋值操作符包括
          +=、-=、*=、/=、%=、<<=、>>=、>>>=、&=、^=和|=）Java语言规范中讲到，复合赋值
          E1 op= E2等价于简单赋值 E1 = (T)((E1)op(E2))，其中T是E1的类型，除非E1只被计
          算一次。

          为了避免这种令人不快的突袭，请不要将复合赋值操作符作用于byte、short或char类型的
          变量上。在将复合赋值操作符作用于int类型的变量上时，要确保表达式右侧不是long、
          float或double类型。在将复合赋值操作符作用于float类型的变量上时，要确保表达式右
          侧不是double类型。这些规则足以防止编译器产生危险的窄化转型。
          */


      }
}
